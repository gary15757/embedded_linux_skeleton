/*
 * simplewebfactory.cpp
 *
 *  Created on: Jul 20, 2018
 *      Author: hhdang
 */

#include <string.h>

#include <iostream>
#include <vector>
#include <algorithm>

#include "simplewebfactory.h"

static char* binary_html_to_chars(unsigned char start[], unsigned char end[]) {

    char * str = new char [(end - start) + 1];
    memcpy(str, start, (end - start));
    str[(end - start)] = '\0';

    return str;
}

simpleWebFactory::simpleWebFactory()
{
    extern unsigned char _binary_header_html_start[];
    extern unsigned char _binary_header_html_end[];

    char * header_buffer = binary_html_to_chars(_binary_header_html_start, _binary_header_html_end);
    this->html_header_str = header_buffer;
    delete []header_buffer;

    extern unsigned char _binary_footer_html_start[];
    extern unsigned char _binary_footer_html_end[];

    char * footer_buffer = binary_html_to_chars(_binary_footer_html_start, _binary_footer_html_end);
    this->html_footer_str = footer_buffer;
    delete []footer_buffer;

    extern unsigned char _binary_navbar_html_start[];
    extern unsigned char _binary_navbar_html_end[];

    char * navbar_buffer = binary_html_to_chars(_binary_navbar_html_start, _binary_navbar_html_end);
    this->html_navbar_str = navbar_buffer;
    delete []navbar_buffer;

    this->init_url_map();
}

void simpleWebFactory::init_url_map()
{
    extern unsigned char _binary_dashboard_html_start[];
    extern unsigned char _binary_dashboard_html_end[];

    char * dashboard_buffer = binary_html_to_chars(_binary_dashboard_html_start, _binary_dashboard_html_end);
    this->url_map.insert(std::pair<std::string,std::string>("/", dashboard_buffer));
    delete []dashboard_buffer;
}

simpleWebFactory::~simpleWebFactory()
{

}

simpleWebFactory *simpleWebFactory::s_instance = 0;

simpleWebFactory* simpleWebFactory::getInstance()
{
    if (s_instance == 0) {
        s_instance = new simpleWebFactory();
    }

    return s_instance;
}

const char* simpleWebFactory::get_html_header_str()
{
    return this->html_header_str.c_str();
}

const char* simpleWebFactory::get_html_footer_str()
{
    return this->html_footer_str.c_str();
}

const char* simpleWebFactory::get_html_navbar_str()
{
    return this->html_navbar_str.c_str();
}

const char* simpleWebFactory::get_html_str(const char * url)
{
    const char* main_content = NULL;
    std::map<std::string,std::string>::iterator it;

    it = this->url_map.find(url);
    if (it == this->url_map.end()) {
        return NULL;
    }

    main_content = it->second.c_str();

    static std::string html_str;

    html_str = "<!doctype html>"
                "<html lang=\"en\">";
    html_str += this->get_html_header_str();

    html_str += "<body>";
    html_str += this->get_html_navbar_str();

    html_str += "<div class=\"container-fluid\"><div class=\"row\">";

    // need to be generated by code
    html_str += "   <nav class=\"col-md-2 d-none d-md-block bg-light sidebar\">"
                "   <div class=\"sidebar-sticky\">"
                "      <ul class=\"nav flex-column\">"
                "          <li class=\"nav-item\">"
                "              <a class=\"nav-link active\" href=\"#\">"
                "                  <span data-feather=\"home\"></span>Dashboard <span class=\"sr-only\">(current)</span>"
                "              </a>"
                "          </li>"
                "      </ul>"
                "   </div>"
                "   </nav>"
                "   "
                "   <main role=\"main\" class=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">";
                // "      <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom\">"
                // "          <h1 class=\"h2\">Dashboard</h1>"
                // "      </div>"
    html_str += main_content;
    html_str += "   </main>";

    html_str += "</div";

    html_str += this->get_html_footer_str();

    html_str += "</body>";
    html_str += "</html>";

    return html_str.c_str();
}
